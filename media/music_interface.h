/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -c Music -p music_interface.h:music_interface.cpp com.meego.app.Music.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MUSIC_INTERFACE_H_1306878433
#define MUSIC_INTERFACE_H_1306878433

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.meego.app.music
 */
class Music: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.meego.app.music"; }

public:
    Music(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~Music();

    Q_PROPERTY(QStringList nowNextTracks READ nowNextTracks WRITE setNowNextTracks)
    inline QStringList nowNextTracks() const
    { return qvariant_cast< QStringList >(property("nowNextTracks")); }
    inline void setNowNextTracks(const QStringList &value)
    { setProperty("nowNextTracks", qVariantFromValue(value)); }

    Q_PROPERTY(QString state READ state WRITE setState)
    inline QString state() const
    { return qvariant_cast< QString >(property("state")); }
    inline void setState(const QString &value)
    { setProperty("state", qVariantFromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> close()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("close"), argumentList);
    }

    inline QDBusPendingReply<> fastForward()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("fastForward"), argumentList);
    }

    inline QDBusPendingReply<int> getCurrentTrack()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getCurrentTrack"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getCurrentTrackMetadata()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getCurrentTrackMetadata"), argumentList);
    }

    inline QDBusPendingReply<int> getNumberOfTracks()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getNumberOfTracks"), argumentList);
    }

    inline QDBusPendingReply<int> getPlaybackMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getPlaybackMode"), argumentList);
    }

    inline QDBusPendingReply<int> getPlaybackState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getPlaybackState"), argumentList);
    }

    inline QDBusPendingReply<int> getPosition()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getPosition"), argumentList);
    }

    inline QDBusPendingReply<int> getVolume()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getVolume"), argumentList);
    }

    inline QDBusPendingReply<> next()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("next"), argumentList);
    }

    inline QDBusPendingReply<> pause()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("pause"), argumentList);
    }

    inline QDBusPendingReply<> play()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("play"), argumentList);
    }

    inline QDBusPendingReply<> playNextTrack()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("playNextTrack"), argumentList);
    }

    inline QDBusPendingReply<> playPreviousTrack()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("playPreviousTrack"), argumentList);
    }

    inline QDBusPendingReply<> prev()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("prev"), argumentList);
    }

    inline QDBusPendingReply<> rewind()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("rewind"), argumentList);
    }

    inline QDBusPendingReply<> setMuted(bool muted)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(muted);
        return asyncCallWithArgumentList(QLatin1String("setMuted"), argumentList);
    }

    inline QDBusPendingReply<> setVolume(int level)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(level);
        return asyncCallWithArgumentList(QLatin1String("setVolume"), argumentList);
    }

    inline QDBusPendingReply<> show()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("show"), argumentList);
    }

    inline QDBusPendingReply<> stop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stop"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void currentTrackMetadataChanged(const QStringList &data);
    void error(int errorCode);
    void nowNextTracksChanged();
    void playerClosed();
    void playerLaunched();
    void positionChanged(int position);
    void stateChanged();
    void trackChanged(int track);
};

#endif
